// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64
// +build 386 amd64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type bpfEvent struct {
	Pid  uint32
	Comm [80]uint8
	Fd   uint32
	Len  uint32
	Msg  [500]uint8
}

type bpfLatdata struct {
	Comm    [80]uint8
	DeltaUs uint64
	TsUs    uint64
	Sport   uint16
	Dport   uint16
	Saddr   uint32
	Daddr   uint32
	_       [4]byte
}

type bpfPiddata struct {
	Comm [80]uint8
	Ts   uint64
	Tgid uint32
	_    [4]byte
}

type bpfQueuedata struct {
	Comm                [80]uint8
	ReadBufferMaxUsage  uint32
	WriteBufferMaxUsage uint32
	RqueueSize          uint64
	WqueueSize          uint64
	Rqueue              uint64
	Wqueue              uint64
}

type bpfTcpevent struct {
	Comm  [80]uint8
	Sport uint16
	Dport uint16
	Saddr uint32
	Daddr uint32
	Srtt  uint32
}

// loadBpf returns the embedded CollectionSpec for bpf.
func loadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bpf: %w", err)
	}

	return spec, err
}

// loadBpfObjects loads bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *bpfObjects
//     *bpfPrograms
//     *bpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfSpecs struct {
	bpfProgramSpecs
	bpfMapSpecs
}

// bpfSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfProgramSpecs struct {
	KprobeRecvfrom      *ebpf.ProgramSpec `ebpf:"kprobe_recvfrom"`
	KprobeSendto        *ebpf.ProgramSpec `ebpf:"kprobe_sendto"`
	KretprobeTcprecvmsg *ebpf.ProgramSpec `ebpf:"kretprobe_tcprecvmsg"`
	KretprobeTcpsendmsg *ebpf.ProgramSpec `ebpf:"kretprobe_tcpsendmsg"`
	TcpClose            *ebpf.ProgramSpec `ebpf:"tcp_close"`
	TcpConnect          *ebpf.ProgramSpec `ebpf:"tcp_connect"`
	TcpRcvStateProcess  *ebpf.ProgramSpec `ebpf:"tcp_rcv_state_process"`
	TcpRecvmsg          *ebpf.ProgramSpec `ebpf:"tcp_recvmsg"`
	TcpSendmsg          *ebpf.ProgramSpec `ebpf:"tcp_sendmsg"`
}

// bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfMapSpecs struct {
	Events        *ebpf.MapSpec `ebpf:"events"`
	Latdatas      *ebpf.MapSpec `ebpf:"latdatas"`
	Piddatas      *ebpf.MapSpec `ebpf:"piddatas"`
	Queuedatas    *ebpf.MapSpec `ebpf:"queuedatas"`
	Start         *ebpf.MapSpec `ebpf:"start"`
	TcpQueueStats *ebpf.MapSpec `ebpf:"tcp_queue_stats"`
	Tcpevents     *ebpf.MapSpec `ebpf:"tcpevents"`
	WhoRecvmsg    *ebpf.MapSpec `ebpf:"who_recvmsg"`
	WhoSendmsg    *ebpf.MapSpec `ebpf:"who_sendmsg"`
}

// bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfObjects struct {
	bpfPrograms
	bpfMaps
}

func (o *bpfObjects) Close() error {
	return _BpfClose(
		&o.bpfPrograms,
		&o.bpfMaps,
	)
}

// bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfMaps struct {
	Events        *ebpf.Map `ebpf:"events"`
	Latdatas      *ebpf.Map `ebpf:"latdatas"`
	Piddatas      *ebpf.Map `ebpf:"piddatas"`
	Queuedatas    *ebpf.Map `ebpf:"queuedatas"`
	Start         *ebpf.Map `ebpf:"start"`
	TcpQueueStats *ebpf.Map `ebpf:"tcp_queue_stats"`
	Tcpevents     *ebpf.Map `ebpf:"tcpevents"`
	WhoRecvmsg    *ebpf.Map `ebpf:"who_recvmsg"`
	WhoSendmsg    *ebpf.Map `ebpf:"who_sendmsg"`
}

func (m *bpfMaps) Close() error {
	return _BpfClose(
		m.Events,
		m.Latdatas,
		m.Piddatas,
		m.Queuedatas,
		m.Start,
		m.TcpQueueStats,
		m.Tcpevents,
		m.WhoRecvmsg,
		m.WhoSendmsg,
	)
}

// bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfPrograms struct {
	KprobeRecvfrom      *ebpf.Program `ebpf:"kprobe_recvfrom"`
	KprobeSendto        *ebpf.Program `ebpf:"kprobe_sendto"`
	KretprobeTcprecvmsg *ebpf.Program `ebpf:"kretprobe_tcprecvmsg"`
	KretprobeTcpsendmsg *ebpf.Program `ebpf:"kretprobe_tcpsendmsg"`
	TcpClose            *ebpf.Program `ebpf:"tcp_close"`
	TcpConnect          *ebpf.Program `ebpf:"tcp_connect"`
	TcpRcvStateProcess  *ebpf.Program `ebpf:"tcp_rcv_state_process"`
	TcpRecvmsg          *ebpf.Program `ebpf:"tcp_recvmsg"`
	TcpSendmsg          *ebpf.Program `ebpf:"tcp_sendmsg"`
}

func (p *bpfPrograms) Close() error {
	return _BpfClose(
		p.KprobeRecvfrom,
		p.KprobeSendto,
		p.KretprobeTcprecvmsg,
		p.KretprobeTcpsendmsg,
		p.TcpClose,
		p.TcpConnect,
		p.TcpRcvStateProcess,
		p.TcpRecvmsg,
		p.TcpSendmsg,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed bpf_bpfel_x86.o
var _BpfBytes []byte
